[{"/Users/terence/code/log-front/src/index.js":"1","/Users/terence/code/log-front/src/App.tsx":"2","/Users/terence/code/log-front/src/App.constants.ts":"3","/Users/terence/code/log-front/src/pages/index.ts":"4","/Users/terence/code/log-front/src/stores/index.ts":"5","/Users/terence/code/log-front/src/pages/page.constants.tsx":"6","/Users/terence/code/log-front/src/stores/constants.ts":"7","/Users/terence/code/log-front/src/pages/home.tsx":"8","/Users/terence/code/log-front/src/stores/calorieStore.tsx":"9","/Users/terence/code/log-front/src/stores/lifeEventStore.tsx":"10","/Users/terence/code/log-front/src/stores/logEntryStore.tsx":"11","/Users/terence/code/log-front/src/data-vis/weight/index.ts":"12","/Users/terence/code/log-front/src/data-vis/analysis/index.ts":"13","/Users/terence/code/log-front/src/data-vis/life-event/index.ts":"14","/Users/terence/code/log-front/src/data-vis/memory/index.ts":"15","/Users/terence/code/log-front/src/data-vis/calendar/index.ts":"16","/Users/terence/code/log-front/src/data-vis/keywords/index.ts":"17","/Users/terence/code/log-front/src/entry-modal/event-entry/EventFormObject.ts":"18","/Users/terence/code/log-front/src/entry-modal/calorie-entry/CalorieFormErrorObject.ts":"19","/Users/terence/code/log-front/src/entry-modal/event-entry/EventFormErrorObject.ts":"20","/Users/terence/code/log-front/src/entry-modal/calorie-entry/CalorieFormObject.ts":"21","/Users/terence/code/log-front/src/entry-modal/log-entry/LogFormObject.ts":"22","/Users/terence/code/log-front/src/entry-modal/log-entry/LogFormErrorObject.ts":"23","/Users/terence/code/log-front/src/pages/constants.tsx":"24","/Users/terence/code/log-front/src/custom-components/expanding-container/expanding-container.component.tsx":"25","/Users/terence/code/log-front/src/stores/baseStore.ts":"26","/Users/terence/code/log-front/src/entry-modal/calorie-entry/index.ts":"27","/Users/terence/code/log-front/src/entry-modal/log-entry/index.ts":"28","/Users/terence/code/log-front/src/entry-modal/event-entry/index.ts":"29","/Users/terence/code/log-front/src/stores/mockData/lifeEventStoreMocks.ts":"30","/Users/terence/code/log-front/src/stores/mockData/calorieStoreMocks.ts":"31","/Users/terence/code/log-front/src/stores/mockData/mockHelpers.ts":"32","/Users/terence/code/log-front/src/stores/mockData/logEntryStoreMocks.ts":"33","/Users/terence/code/log-front/src/data-vis/weight/weight.helper.ts":"34","/Users/terence/code/log-front/src/data-vis/analysis/analysis.constants.ts":"35","/Users/terence/code/log-front/src/data-vis/analysis/combinedData.helper.ts":"36","/Users/terence/code/log-front/src/data-vis/keywords/keyword.interfaces.ts":"37","/Users/terence/code/log-front/src/App.utils.tsx":"38","/Users/terence/code/log-front/src/data-vis/weight/weight-line-graph.tsx":"39","/Users/terence/code/log-front/src/data-vis/weight/weight.tsx":"40","/Users/terence/code/log-front/src/data-vis/analysis/analysis.tsx":"41","/Users/terence/code/log-front/src/data-vis/life-event/life-events.component.tsx":"42","/Users/terence/code/log-front/src/data-vis/memory/memory.tsx":"43","/Users/terence/code/log-front/src/data-vis/calendar/calendar.tsx":"44","/Users/terence/code/log-front/src/data-vis/keywords/keyword.tsx":"45","/Users/terence/code/log-front/src/data-vis/keywords/keywordTag.tsx":"46","/Users/terence/code/log-front/src/data-vis/keywords/keywordList.tsx":"47","/Users/terence/code/log-front/src/data-vis/calendar/calendar-keyword.tsx":"48","/Users/terence/code/log-front/src/data-vis/keywords/keywordTreeMap.tsx":"49","/Users/terence/code/log-front/src/entry-modal/calorie-entry/calorie.interfaces.ts":"50","/Users/terence/code/log-front/src/entry-modal/log-entry/log-entry.interfaces.ts":"51","/Users/terence/code/log-front/src/entry-modal/log-entry/log-entry.helper.ts":"52","/Users/terence/code/log-front/src/entry-modal/event-entry/life-event.interfaces.ts":"53","/Users/terence/code/log-front/src/entry-modal/log-entry/log-entry.component.tsx":"54","/Users/terence/code/log-front/src/entry-modal/calorie-entry/calorie.component.tsx":"55","/Users/terence/code/log-front/src/entry-modal/event-entry/life-event.component.tsx":"56","/Users/terence/code/log-front/src/custom-components/index.ts":"57","/Users/terence/code/log-front/src/entry-modal/calorie-entry/csv-upload/index.ts":"58","/Users/terence/code/log-front/src/custom-components/rejected.tsx":"59","/Users/terence/code/log-front/src/custom-components/numbers-only-select.tsx":"60","/Users/terence/code/log-front/src/custom-components/warning-result.tsx":"61","/Users/terence/code/log-front/src/entry-modal/calorie-entry/csv-upload/csv-upload.component.tsx":"62","/Users/terence/code/log-front/src/custom-components/ReactEcharts.tsx":"63"},{"size":356,"mtime":1608951596958,"results":"64","hashOfConfig":"65"},{"size":1078,"mtime":1608955131321,"results":"66","hashOfConfig":"65"},{"size":401,"mtime":1593988157099,"results":"67","hashOfConfig":"65"},{"size":23,"mtime":1588830221131,"results":"68","hashOfConfig":"65"},{"size":28,"mtime":1591077949287,"results":"69","hashOfConfig":"65"},{"size":1965,"mtime":1597109327548,"results":"70","hashOfConfig":"65"},{"size":1106,"mtime":1598219600371,"results":"71","hashOfConfig":"65"},{"size":8551,"mtime":1608956415385,"results":"72","hashOfConfig":"65"},{"size":2095,"mtime":1609022316001,"results":"73","hashOfConfig":"65"},{"size":1881,"mtime":1608955811759,"results":"74","hashOfConfig":"65"},{"size":4551,"mtime":1608955772857,"results":"75","hashOfConfig":"65"},{"size":95,"mtime":1592179085512,"results":"76","hashOfConfig":"65"},{"size":104,"mtime":1592618073955,"results":"77","hashOfConfig":"65"},{"size":40,"mtime":1596313369561,"results":"78","hashOfConfig":"65"},{"size":25,"mtime":1588821738064,"results":"79","hashOfConfig":"65"},{"size":63,"mtime":1588831361962,"results":"80","hashOfConfig":"65"},{"size":218,"mtime":1592098749370,"results":"81","hashOfConfig":"65"},{"size":999,"mtime":1608955869105,"results":"82","hashOfConfig":"65"},{"size":959,"mtime":1608956302121,"results":"83","hashOfConfig":"65"},{"size":970,"mtime":1608956328735,"results":"84","hashOfConfig":"65"},{"size":904,"mtime":1608955668242,"results":"85","hashOfConfig":"65"},{"size":1545,"mtime":1608955557692,"results":"86","hashOfConfig":"65"},{"size":962,"mtime":1608955648124,"results":"87","hashOfConfig":"65"},{"size":763,"mtime":1597106229003,"results":"88","hashOfConfig":"65"},{"size":907,"mtime":1609022854841,"results":"89","hashOfConfig":"65"},{"size":407,"mtime":1608955907752,"results":"90","hashOfConfig":"65"},{"size":74,"mtime":1607317907958,"results":"91","hashOfConfig":"65"},{"size":114,"mtime":1607394799753,"results":"92","hashOfConfig":"65"},{"size":80,"mtime":1607317863921,"results":"93","hashOfConfig":"65"},{"size":416,"mtime":1598222792710,"results":"94","hashOfConfig":"65"},{"size":700,"mtime":1598222002404,"results":"95","hashOfConfig":"65"},{"size":255,"mtime":1607829143832,"results":"96","hashOfConfig":"65"},{"size":1294,"mtime":1609022192247,"results":"97","hashOfConfig":"65"},{"size":1900,"mtime":1609022241642,"results":"98","hashOfConfig":"65"},{"size":478,"mtime":1607398862206,"results":"99","hashOfConfig":"65"},{"size":4383,"mtime":1609022388325,"results":"100","hashOfConfig":"65"},{"size":1635,"mtime":1587937060506,"results":"101","hashOfConfig":"65"},{"size":1682,"mtime":1609020779311,"results":"102","hashOfConfig":"65"},{"size":2269,"mtime":1609022378186,"results":"103","hashOfConfig":"65"},{"size":482,"mtime":1608955958132,"results":"104","hashOfConfig":"65"},{"size":2166,"mtime":1609013328116,"results":"105","hashOfConfig":"65"},{"size":2975,"mtime":1609022376849,"results":"106","hashOfConfig":"65"},{"size":3262,"mtime":1609025788264,"results":"107","hashOfConfig":"65"},{"size":2741,"mtime":1609022372753,"results":"108","hashOfConfig":"65"},{"size":3640,"mtime":1609022375534,"results":"109","hashOfConfig":"65"},{"size":749,"mtime":1608956255588,"results":"110","hashOfConfig":"65"},{"size":1653,"mtime":1608955461078,"results":"111","hashOfConfig":"65"},{"size":2239,"mtime":1609014069802,"results":"112","hashOfConfig":"65"},{"size":885,"mtime":1609013382291,"results":"113","hashOfConfig":"65"},{"size":136,"mtime":1607310731784,"results":"114","hashOfConfig":"65"},{"size":333,"mtime":1608955940732,"results":"115","hashOfConfig":"65"},{"size":145,"mtime":1607399517983,"results":"116","hashOfConfig":"65"},{"size":164,"mtime":1607317974218,"results":"117","hashOfConfig":"65"},{"size":3266,"mtime":1608955599442,"results":"118","hashOfConfig":"65"},{"size":2501,"mtime":1608956313730,"results":"119","hashOfConfig":"65"},{"size":2914,"mtime":1608956282194,"results":"120","hashOfConfig":"65"},{"size":100,"mtime":1589091086103,"results":"121","hashOfConfig":"65"},{"size":39,"mtime":1596333892568,"results":"122","hashOfConfig":"65"},{"size":224,"mtime":1608955507715,"results":"123","hashOfConfig":"65"},{"size":844,"mtime":1608955620375,"results":"124","hashOfConfig":"65"},{"size":313,"mtime":1608955627277,"results":"125","hashOfConfig":"65"},{"size":1915,"mtime":1608956367164,"results":"126","hashOfConfig":"65"},{"size":545,"mtime":1609013982164,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"1kww3tq",{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"133"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"133"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"133"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"133"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"133"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"133"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"133"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},"/Users/terence/code/log-front/src/index.js",[],[],"/Users/terence/code/log-front/src/App.tsx",[],[],"/Users/terence/code/log-front/src/App.constants.ts",[],"/Users/terence/code/log-front/src/pages/index.ts",[],"/Users/terence/code/log-front/src/stores/index.ts",[],"/Users/terence/code/log-front/src/pages/page.constants.tsx",[],"/Users/terence/code/log-front/src/stores/constants.ts",[],"/Users/terence/code/log-front/src/pages/home.tsx",["263","264","265","266"],"import React from 'react';\nimport { message, Spin } from 'antd';\nimport { EntryFormModal, IEntryFormModalProps } from '../entry-modal/entry-modal.component';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { LifeEventEntry } from '../entry-modal/event-entry';\nimport { LifeEventStore } from '../stores/lifeEventStore';\nimport { CalorieEntry } from '../entry-modal/calorie-entry';\nimport { CalorieStore } from '../stores/calorieStore';\nimport { LogEntry, dateFormat, ILogEntry } from '../entry-modal/log-entry';\nimport { LogEntryStore } from '../stores/logEntryStore';\nimport moment from 'moment';\nimport { EntryFormSelector } from '../custom-components/entry-form-select/entry-form-selector.component';\nimport { EntryOptions, EntryType } from './constants';\nimport { ExpandingContainer } from '../custom-components/expanding-container/expanding-container.component';\n\nimport './home.less';\nimport { KeywordPage } from '../data-vis/keywords';\nimport { MemoryPage } from '../data-vis/memory';\nimport { LifeEventsPage } from '../data-vis/life-event';\nimport CalendarKeyword from '../data-vis/calendar/calendar-keyword';\nimport { CalendarPage } from '../data-vis/calendar';\nimport { CalorieFormObject } from '../entry-modal/calorie-entry/CalorieFormObject';\nimport { CalorieFormErrorObject } from '../entry-modal/calorie-entry/CalorieFormErrorObject';\nimport { EventFormObject } from '../entry-modal/event-entry/EventFormObject';\nimport { EventFormErrorObject } from '../entry-modal/event-entry/EventFormErrorObject';\nimport { LogFormObject } from '../entry-modal/log-entry/LogFormObject';\nimport { LogFormErrorObject } from '../entry-modal/log-entry/LogFormErrorObject';\nimport { FULFILLED } from 'mobx-utils';\nimport { WeightLineGraph } from '../data-vis/weight';\n\ninterface IProps {\n  lifeEventStore?: LifeEventStore;\n  calorieStore?: CalorieStore;\n  logEntryStore?: LogEntryStore;\n}\n\n@inject('lifeEventStore', 'calorieStore', 'logEntryStore')\n@observer\nexport class Home extends React.Component<IProps> {\n  @observable\n  private eventFormObject = new EventFormObject();\n  @observable\n  private eventFormErrorObject = new EventFormErrorObject();\n\n  @observable\n  private calorieFormObject = new CalorieFormObject();\n  @observable\n  private calorieFormErrorObject = new CalorieFormErrorObject();\n\n  @observable\n  private logFormObject;\n  @observable\n  private logFormErrorObject = new LogFormErrorObject();\n\n  @observable\n  private selectedForm: EntryType = EntryType.LOG;\n\n  @observable\n  private entryModalVisible = false;\n\n  public async componentDidMount(): Promise<void> {\n    const {logEntryStore} = this.props;\n    await logEntryStore?.fetchLastDates();\n    this.logFormObject = new LogFormObject(logEntryStore?.lastDates.last);\n  }\n\n  @action.bound\n  private createNewLogFormObject(date: string) {\n    this.logFormObject = new LogFormObject(date);\n  }\n\n  private handleSaveLog = async () => {\n    const {logEntryStore} = this.props;\n    const entry = this.logFormObject.logEntry;\n\n    this.validateLogObject();\n\n    if (this.logFormErrorObject.hasErrors) {\n      return;\n    }\n\n    try {\n      await logEntryStore.save(entry);\n      const nextDate: string = moment(entry.dateState?.date, dateFormat)\n        .utc()\n        .add(-moment().utcOffset(), 'm')\n        .add(1, 'day')\n        .format(dateFormat);\n      logEntryStore?.setLatestDate(nextDate);\n      this.createNewLogFormObject(nextDate);\n    } catch (error) {\n      message.error(`Error saving data for ${entry.dateState?.date}`);\n      console.error(error);\n    }\n  }\n\n  private validateLogObject = () => {\n    this.logFormErrorObject.clear();\n    const obj: ILogEntry = this.logFormObject.logEntry;\n\n    this.logFormErrorObject.setError('dateState', obj.dateState?.date ? undefined : 'Mandatory');\n    this.logFormErrorObject.setError('textState', obj.textState?.data?.trim() ? undefined : 'Mandatory');\n  }\n\n  private handleSaveLifeEvent = async () => {\n    const { lifeEventStore } = this.props;\n\n    this.validateEventObject();\n    if (this.eventFormErrorObject.hasErrors) {\n      return;\n    }\n\n    try {\n      await lifeEventStore.save(this.eventFormObject.lifeEvent);\n    } catch (error) {\n      message.error('Error saving event');\n      console.error(error);\n    }\n  }\n\n  private validateEventObject = () => {\n    this.eventFormErrorObject.clear();\n\n    const entry = this.eventFormObject.lifeEvent;\n    this.eventFormErrorObject.setError('date', entry.date ? undefined : 'Mandatory');\n    this.eventFormErrorObject.setError('name', entry.name ? undefined : 'Mandatory');\n    this.eventFormErrorObject.setError('intensity', entry.intensity ? undefined : 'Mandatory');\n  }\n\n  private handleSaveCalories = async () => {\n    const {calorieStore} = this.props;\n\n    this.validateCalorieObject();\n    if (this.calorieFormErrorObject.hasErrors) {\n      return;\n    }\n\n    try {\n      if (this.calorieFormObject.calories) {\n        await calorieStore?.save(this.calorieFormObject.calorieEntry);\n      } else {\n        await calorieStore?.saveCaloriesFromCSV(this.calorieFormObject.csvFile);\n      }\n    } catch (error) {\n      message.error('Error saving calories');\n      console.error(error);\n    }\n  }\n\n  private validateCalorieObject = () => {\n    this.calorieFormErrorObject.clear();\n    const entry = this.calorieFormObject.calorieEntry;\n    const csv = this.calorieFormObject.csvFile;\n\n    if (csv || (entry.date && entry.calories)) {\n      return;\n    }\n\n    this.calorieFormErrorObject.setError('calories', entry.calories ? undefined : 'Mandatory');\n    this.calorieFormErrorObject.setError('date', entry.date ? undefined: 'Mandatory');\n    this.calorieFormErrorObject.setError('csvFile', csv ? undefined: 'No file uploaded');\n  }\n\n  @action\n  private handleEntryFormSelect = (entry: EntryType) => {\n    this.selectedForm = entry;\n    this.setEntryModalVisible(true);\n  }\n\n  private get entryFormModalProps(): IEntryFormModalProps {\n    const onOk = {\n      [EntryType.LOG]:this.handleSaveLog,\n      [EntryType.CALORIE]:this.handleSaveCalories,\n      [EntryType.EVENT]:this.handleSaveLifeEvent,\n    };\n\n    const title = {\n      [EntryType.LOG]: 'Log entry',\n      [EntryType.CALORIE]:'Calorie entry',\n      [EntryType.EVENT]:'Life Event entry',\n    };\n\n    return {\n      title: title[this.selectedForm],\n      keepOpen: this.selectedForm === EntryType.LOG,\n      onCancel: () => this.setEntryModalVisible(false),\n      onOk: onOk[this.selectedForm],\n    };\n  }\n\n  @computed\n  private get entryFormModalContent(): React.ReactNode {\n    const content = {\n      [EntryType.LOG]: this.props.logEntryStore?.fetchingDates?.state === FULFILLED ?\n        <LogEntry formObject={this.logFormObject} formErrorObject={this.logFormErrorObject}/> :\n        <Spin/>,\n      [EntryType.CALORIE]: <CalorieEntry formObject={this.calorieFormObject} formErrorObject={this.calorieFormErrorObject}/>,\n      [EntryType.EVENT]:  <LifeEventEntry formObject={this.eventFormObject} formErrorObject={this.eventFormErrorObject}/>,\n    };\n\n    return content[this.selectedForm] ?? null;\n  }\n\n  @computed\n  private get analysisCharts() {\n    return [\n      {\n        key: 0,\n        title: 'Feelings',\n        component: <KeywordPage/>,\n      },\n      {\n        key: 1,\n        title: 'Feelings Calendar',\n        component: <CalendarPage/>,\n      },\n      {\n        key: 2,\n        title: 'Events',\n        component: <LifeEventsPage/>,\n      },\n      {\n        key: 3,\n        title: 'Memories',\n        component: <MemoryPage/>,\n      },\n    ];\n  }\n\n  public render(): React.ReactNode {\n    return (\n      <div className=\"home\">\n        {/* <EntryFormSelector options={EntryOptions} onSelect={this.handleEntryFormSelect}/>\n        <EntryFormModal  visible={this.entryModalVisible} {...this.entryFormModalProps}>\n          {this.entryFormModalContent}\n        </EntryFormModal> */}\n\n        <div className=\"mainCard\">\n          <WeightLineGraph/>\n        </div>\n\n        <div className=\"analysisCards\">\n          {this.analysisCharts\n            // .filter(c => c.key === 0)\n            .map(chart => (\n              <ExpandingContainer\n                bordered={false}\n                className=\"mb-8\"\n                title={chart.title} key={chart.key}>\n                {chart.component}\n              </ExpandingContainer>\n            ))}\n        </div>\n      </div>\n    );\n  }\n\n  @action.bound\n  private setEntryModalVisible(visible: boolean) {\n    this.props.logEntryStore?.fetchLastDates();\n    this.entryModalVisible = visible;\n  }\n}\n","/Users/terence/code/log-front/src/stores/calorieStore.tsx",["267","268"],"import { observable, action } from 'mobx';\nimport { IPromiseBasedObservable, fromPromise } from 'mobx-utils';\nimport { RcFile } from 'antd/lib/upload';\nimport { CALORIE_FROM_FILE_URL, CALORIE_ENTRIES_URL } from './constants';\nimport get, { AxiosResponse } from 'axios';\nimport { ICalorieEntry } from '../entry-modal/calorie-entry';\nimport { BaseStore, BaseStoreProps } from './baseStore';\nimport { mockCalorieData } from './mockData/calorieStoreMocks';\n\nexport class CalorieStore extends BaseStore<ICalorieEntry>{\n\n  public constructor(props: BaseStoreProps) {\n    super(props);\n  }\n\n  @observable\n  public fetchingCalories: IPromiseBasedObservable<AxiosResponse<any>> | undefined;\n\n  @observable\n  public savingCalorieEntry: IPromiseBasedObservable<Response> | undefined;\n\n  @observable\n  public calorieEntries: ICalorieEntry[] = [];\n\n  public async save(entry: ICalorieEntry): Promise<void> {\n    if (this.shouldMock) {\n      console.log('Saving calorie entry', entry);\n      return;\n    }\n\n    this.savingCalorieEntry = fromPromise(fetch(CALORIE_ENTRIES_URL, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(entry),\n    }));\n  }\n\n  public async saveCaloriesFromCSV(csvFile: RcFile): Promise<Response> {\n    if (this.shouldMock) {\n      console.log('saved', csvFile);\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', csvFile, 'calories.csv');\n\n    return fetch(CALORIE_FROM_FILE_URL, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  @action\n  public async fetch(): Promise<void> {\n    if (this.shouldMock) {\n      this.setCalorieEntries(mockCalorieData);\n      return;\n    }\n\n    this.fetchingCalories = fromPromise(get(CALORIE_ENTRIES_URL));\n    await this.fetchingCalories.then((response: any) => {\n      this.setCalorieEntries(response.data as ICalorieEntry[]);\n    });\n  }\n\n  @action.bound\n  private setCalorieEntries(entries: ICalorieEntry[]): void {\n    this.calorieEntries = entries.slice().sort((a,b) => a.date - b.date);\n  }\n}\n\n","/Users/terence/code/log-front/src/stores/lifeEventStore.tsx",["269"],"import { action, observable, computed } from 'mobx';\nimport get from 'axios';\nimport { IPromiseBasedObservable, fromPromise } from 'mobx-utils';\nimport { LIFE_EVENTS_URL } from '.';\nimport { AxiosResponse } from 'axios';\nimport { ILifeEvent } from '../entry-modal/event-entry';\nimport { BaseStore, BaseStoreProps } from './baseStore';\nimport { mockLifeEventData } from './mockData/lifeEventStoreMocks';\n\nexport class LifeEventStore extends BaseStore<ILifeEvent>{\n\n  public constructor(props: BaseStoreProps) {\n    super(props);\n  }\n\n  @observable\n  public fetchingLifeEvents: IPromiseBasedObservable<AxiosResponse<any>> | undefined;\n\n  @observable\n  public savingLifeEvents: IPromiseBasedObservable<Response> | undefined;\n\n  @observable\n  public lifeEvents: ILifeEvent[] = [];\n\n  @computed\n  public get isSaving(): boolean {\n    return this.savingLifeEvents?.state === 'pending';\n  }\n\n  @computed\n  public get isFetching(): boolean {\n    return this.fetchingLifeEvents?.state === 'pending';\n  }\n\n  @action.bound\n  public async save(event: ILifeEvent): Promise<void> {\n    if (this.shouldMock) {\n      console.log('Saving life event', event);\n      return;\n    }\n\n    this.savingLifeEvents = fromPromise(fetch(LIFE_EVENTS_URL, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(event),\n    }));\n\n    await this.savingLifeEvents;\n  }\n\n  @action.bound\n  public async fetch(): Promise<void> {\n    if (this.shouldMock) {\n      this.setLifeEvents(mockLifeEventData);\n      return;\n    }\n\n    this.fetchingLifeEvents = fromPromise(get(LIFE_EVENTS_URL));\n    await this.fetchingLifeEvents.then((response) => {\n      this.setLifeEvents(response.data as ILifeEvent[]);\n    });\n  }\n\n  @action.bound\n  public setLifeEvents(events: ILifeEvent[]): void {\n    this.lifeEvents = events;\n  }\n}","/Users/terence/code/log-front/src/stores/logEntryStore.tsx",["270","271","272","273","274","275","276","277","278","279"],"import { observable, action } from 'mobx';\nimport { IPromiseBasedObservable, fromPromise } from 'mobx-utils';\nimport { KEYWORD_URL, TEXT_URL, WEIGHT_URL, LAST_DATES_URL, LOG_ENTRY_URL } from '.';\nimport get, { AxiosResponse } from 'axios';\nimport { dateFormat, ILogEntry } from '../entry-modal/log-entry';\nimport { BaseStore, BaseStoreProps } from './baseStore';\nimport { mockKeywordData, mockMemoryData, mockWeightData, mockLastDateData } from './mockData/logEntryStoreMocks';\nimport { Utils } from '../App.utils';\nimport moment from 'moment';\nimport { IWeightDTO } from '../data-vis/analysis';\nimport { generateMockAxisResponse } from './mockData/mockHelpers';\n\nexport interface KeywordEntry {\n  date: string;\n  keywords: string[];\n}\n\nexport interface Memory {\n  date: string;\n  text: string;\n}\n\nexport interface ILastDates {\n  first: string;\n  last: string;\n}\n\nexport class LogEntryStore extends BaseStore<ILogEntry> {\n\n  public constructor(props: BaseStoreProps) {\n    super(props);\n  }\n\n  @observable\n  public fetchingMemory: IPromiseBasedObservable<AxiosResponse<any>>;\n\n  @observable\n  public fetchingWeight: IPromiseBasedObservable<AxiosResponse<any>>;\n\n  @observable\n  public fetchingKeywords: IPromiseBasedObservable<AxiosResponse<any>>;\n\n  @observable\n  public fetchingDates: IPromiseBasedObservable<AxiosResponse<ILastDates>>;\n\n  @observable\n  public keywords: KeywordEntry[] = [];\n\n  @observable\n  public memories: Memory[] = [];\n\n  @observable\n  public weights: IWeightDTO[] = [];\n\n  @observable\n  public lastDates: ILastDates = {\n    first: '',\n    last: '',\n  };\n\n  @action\n  public async fetchKeywords(): Promise<void> {\n    if (this.shouldMock) {\n      this.setKeywords(mockKeywordData);\n      this.fetchingKeywords = fromPromise(generateMockAxisResponse<any>());\n      return;\n    }\n\n    this.fetchingKeywords = fromPromise(get(KEYWORD_URL));\n    await this.fetchingKeywords.then(response => {\n      this.setKeywords(response.data);\n    });\n  }\n\n  @action.bound\n  public async fetchMemory(): Promise<void> {\n    if (this.shouldMock) {\n      this.setMemories(mockMemoryData);\n      this.fetchingMemory = fromPromise(generateMockAxisResponse<any>());\n      return;\n    }\n\n    this.fetchingMemory = fromPromise(get(TEXT_URL));\n    await this.fetchingMemory.then(response => {\n      this.setMemories(response.data);\n    });\n  }\n\n  @action.bound\n  public async fetchWeightData(): Promise<void> {\n    if (this.shouldMock) {\n      this.setWeight(mockWeightData);\n      this.fetchingWeight = fromPromise(generateMockAxisResponse<any>());\n      return;\n    }\n\n    this.fetchingWeight = fromPromise(get(WEIGHT_URL));\n    await this.fetchingWeight.then(response => {\n      this.setWeight(response.data);\n    });\n  }\n\n  @action.bound\n  private setKeywords(keywords: any): void {\n    this.keywords = keywords;\n  }\n\n  @action.bound\n  private setMemories(memories: any): void {\n    this.memories = memories;\n  }\n\n  @action.bound\n  private setWeight(weights: any): void {\n    this.weights = weights;\n  }\n\n  @action.bound\n  private setLastDates(dates: ILastDates): void {\n    this.lastDates = dates;\n  }\n\n  @action.bound\n  public setLatestDate(date: string): void {\n    this.lastDates.last = date;\n  }\n\n  @action\n  public async fetchLastDates(): Promise<void> {\n    if (this.shouldMock) {\n      this.setLastDates(mockLastDateData);\n      this.fetchingDates = fromPromise(generateMockAxisResponse<ILastDates>(mockLastDateData));\n      return;\n    }\n\n    this.fetchingDates = fromPromise(get(LAST_DATES_URL));\n    await this.fetchingDates.then((response) => {\n\n      const last =  moment(Utils.unreverseDateFromServer(response.data.last), dateFormat)\n        .utc()\n        .add(-moment().utcOffset(), 'm')\n        .add(1, 'day')\n        .format(dateFormat);\n\n      this.setLastDates({\n        first: Utils.unreverseDateFromServer(response.data.first),\n        last,\n      });\n    });\n  }\n\n  public fetch = async () => {\n    console.log('sort this out');\n  }\n\n  public save = async (data: ILogEntry): Promise<void> => {\n    const preparedData: ILogEntry = {\n      ...data,\n      textState: {\n        data: data.textState?.data?.trim()\n      }\n    };\n\n    if (this.shouldMock) {\n      console.log('Saving log entry', preparedData);\n      return;\n    }\n\n    try {\n      await fetch(LOG_ENTRY_URL, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(preparedData)\n      });\n    } catch (error) {\n      throw new Error(error);\n    }\n  };\n}","/Users/terence/code/log-front/src/data-vis/weight/index.ts",[],"/Users/terence/code/log-front/src/data-vis/analysis/index.ts",[],"/Users/terence/code/log-front/src/data-vis/life-event/index.ts",[],"/Users/terence/code/log-front/src/data-vis/memory/index.ts",[],"/Users/terence/code/log-front/src/data-vis/calendar/index.ts",[],"/Users/terence/code/log-front/src/data-vis/keywords/index.ts",[],"/Users/terence/code/log-front/src/entry-modal/event-entry/EventFormObject.ts",[],"/Users/terence/code/log-front/src/entry-modal/calorie-entry/CalorieFormErrorObject.ts",[],"/Users/terence/code/log-front/src/entry-modal/event-entry/EventFormErrorObject.ts",[],"/Users/terence/code/log-front/src/entry-modal/calorie-entry/CalorieFormObject.ts",[],"/Users/terence/code/log-front/src/entry-modal/log-entry/LogFormObject.ts",[],"/Users/terence/code/log-front/src/entry-modal/log-entry/LogFormErrorObject.ts",[],"/Users/terence/code/log-front/src/pages/constants.tsx",[],"/Users/terence/code/log-front/src/custom-components/expanding-container/expanding-container.component.tsx",[],"/Users/terence/code/log-front/src/stores/baseStore.ts",[],"/Users/terence/code/log-front/src/entry-modal/calorie-entry/index.ts",[],"/Users/terence/code/log-front/src/entry-modal/log-entry/index.ts",[],"/Users/terence/code/log-front/src/entry-modal/event-entry/index.ts",[],"/Users/terence/code/log-front/src/stores/mockData/lifeEventStoreMocks.ts",[],"/Users/terence/code/log-front/src/stores/mockData/calorieStoreMocks.ts",[],"/Users/terence/code/log-front/src/stores/mockData/mockHelpers.ts",[],"/Users/terence/code/log-front/src/stores/mockData/logEntryStoreMocks.ts",["280","281","282"],"import { Utils } from '../../App.utils';\nimport { IWeightDTO } from '../../data-vis/analysis';\nimport { ILastDates, KeywordEntry, Memory } from '../logEntryStore';\n\nexport const mockLastDateData: ILastDates = {\n  last: '2020-03-07',\n  first: '2019-03-07',\n};\n\nconst wordBank = ['tired', 'happy', 'sad', 'upset', 'excited', 'anxious'];\nconst randWeight = () => (Math.random() * (68 - 62)) + 62;\nconst randDate = () => Math.round(1563158685 - (Math.random() * 1232535) + (Math.random() * 12351)) * 1000;\n\nexport const mockKeywordData: KeywordEntry[] = Array.from({length: 50}, x => x).map(_ => {\n  return {\n    date: `${Utils.toReversedDate(new Date(randDate()))}`,\n    keywords: Array.from(wordBank, x => {\n      if (Math.random() > 0.3) {\n        return x;\n      }\n    }).filter(x => x !== undefined),\n  };\n});\n\nexport const mockMemoryData: Memory[] = Array.from({length: 50}, x => x).map(_ => {\n  return {\n    date: `${Utils.toReversedDate(new Date(randDate()))}`,\n    text: `Mock memory ${Math.random()}`,\n  };\n});\n\nlet seedDate = randDate();\nexport const mockWeightData: IWeightDTO[] = Array.from({length: 50}, x => x).map(_ => {\n  const day = 60 * 60 * 24 * 1000;\n  seedDate += day;\n  return {\n    date: `${Utils.toReversedDate(new Date(seedDate))}`,\n    weight: `${randWeight()}`,\n  };\n});","/Users/terence/code/log-front/src/data-vis/weight/weight.helper.ts",[],"/Users/terence/code/log-front/src/data-vis/analysis/analysis.constants.ts",[],"/Users/terence/code/log-front/src/data-vis/analysis/combinedData.helper.ts",[],"/Users/terence/code/log-front/src/data-vis/keywords/keyword.interfaces.ts",[],"/Users/terence/code/log-front/src/App.utils.tsx",[],"/Users/terence/code/log-front/src/data-vis/weight/weight-line-graph.tsx",[],"/Users/terence/code/log-front/src/data-vis/weight/weight.tsx",[],"/Users/terence/code/log-front/src/data-vis/analysis/analysis.tsx",[],"/Users/terence/code/log-front/src/data-vis/life-event/life-events.component.tsx",["283"],"import React from 'react';\nimport { Card, Timeline, Spin, Affix, PageHeader, Button } from 'antd';\nimport { inject, observer } from 'mobx-react';\nimport { computed, observable, action } from 'mobx';\nimport { LifeEventStore } from '../../stores/lifeEventStore';\nimport { ILifeEvent } from '../../entry-modal/event-entry';\nimport { Utils } from '../../App.utils';\n\nimport './life-events.less';\n\ninterface IProps {\n  lifeEventStore?: LifeEventStore;\n}\n\n@inject('lifeEventStore')\n@observer\nexport class LifeEventsPage extends React.Component<IProps> {\n\n  @observable\n  private container: Window | HTMLElement | null = null;\n\n  public componentDidMount(): void {\n    this.props.lifeEventStore?.fetch();\n  }\n\n  @action.bound\n  private setContainer(ref: any): void{\n    this.container = ref;\n  }\n\n  @computed\n  public get data(): ILifeEvent[] {\n    return (this.props.lifeEventStore?.lifeEvents || [])\n      .sort((a: ILifeEvent, b: ILifeEvent) => {\n        return a.date - b.date;\n      });\n  }\n\n  public render(): React.ReactNode {\n    const { lifeEventStore } = this.props;\n\n    if (lifeEventStore?.fetchingLifeEvents?.state === 'pending') {\n      return <Spin></Spin>;\n    }\n\n    return (\n      <Card>\n        <div ref={this.setContainer}>\n          <Affix target={() => this.container}>\n            <PageHeader\n              ghost={false}\n              title={null}\n              style={{\n                padding: 0\n              }}\n              extra={[\n                <Button key=\"good\">\n                Affix top\n                </Button>,\n              ]}\n            />\n          </Affix>\n        </div>\n\n        <Timeline mode=\"left\" reverse className=\"timeline\">\n          {this.data.map((event: ILifeEvent) => {\n            const good = event.nature === 'good';\n            const nature = event.nature;\n            const size = event.intensity ? 16 + event.intensity ^ 1.05 : 16;\n\n            const timelineDotConfig = {\n              color: nature ? good ? 'green' : 'red' : 'gray',\n              dot: nature ?\n                (\n                  <div style={{\n                    fontSize: `${size}px`,\n                    border: '1px solid',\n                    borderRadius: size,\n                    width: size + 6 * (event.intensity/5),\n                    height: size + 6 * (event.intensity/5),\n                    textAlign: 'center',\n                    paddingTop: '1px'\n                  }}>\n                    {event.intensity}\n                  </div>\n                )\n                : undefined\n            };\n\n            return (\n              <Timeline.Item key={event.date} {...timelineDotConfig}\n                label={Utils.unixTimeToDateString({time:event.date * 1000})}\n                className=\"timelineItem\">\n                <p className=\"name\">{event.name}</p>\n                <p className=\"desc\">{event.description}</p>\n              </Timeline.Item>\n            );}\n          )}\n        </Timeline>\n      </Card>\n    );\n  }\n}","/Users/terence/code/log-front/src/data-vis/memory/memory.tsx",[],"/Users/terence/code/log-front/src/data-vis/calendar/calendar.tsx",[],"/Users/terence/code/log-front/src/data-vis/keywords/keyword.tsx",["284","285"],"import React from 'react';\nimport { Col, Input, Row, Spin } from 'antd';\nimport { inject, observer } from 'mobx-react';\nimport { observable, action, computed } from 'mobx';\nimport { pull } from 'lodash';\nimport {\n  WordCount,\n  KeywordList,\n  KeywordTreemap,\n} from '.';\nimport { Rejected } from '../../custom-components';\nimport { LogEntryStore, KeywordEntry } from '../../stores/logEntryStore';\n\nimport './keyword.less';\nimport { PENDING } from 'mobx-utils';\n\ninterface IProps {\n  logEntryStore?: LogEntryStore;\n}\n\n@inject('logEntryStore')\n@observer\nexport class KeywordPage extends React.Component<IProps> {\n  @observable\n  private bannedList: string[] = [];\n\n  @observable\n  private dictionary: Record<string, number> = {};\n\n  @observable\n  private filterAmount= 5;\n\n  public async componentDidMount(): Promise<void> {\n    await this.props.logEntryStore.fetchKeywords();\n  }\n\n  @computed\n  private get wordCounts(): Record<string, number> {\n    const localDictionary: Record<string, number> = {};\n\n    this.props.logEntryStore?.keywords.forEach((entry: KeywordEntry) => {\n      entry.keywords.forEach((word: string) => {\n        // eslint-disable-next-line no-prototype-builtins\n        if (!localDictionary.hasOwnProperty(word)) {\n          localDictionary[word] = 1;\n        } else {\n          localDictionary[word] += 1;\n        }\n      });\n    });\n\n    return localDictionary;\n  }\n\n  @computed\n  private get activeWords(): WordCount[] {\n    const displayTerms = Object.entries(this.wordCounts)\n      .filter(([key, _]) => !this.bannedList.includes(key))\n      .filter(([_, value]) => value > this.filterAmount)\n      .map(([key, value]) => ({ key, value }));\n\n    displayTerms.slice().sort((a, b) => {\n      return -(a.value - b.value);\n    });\n\n    return displayTerms;\n  }\n\n  @computed\n  private get allWords(): WordCount[] {\n    const words = Object.entries(this.wordCounts)\n      .map(([key, value]) => ({ key, value }));\n\n    words.slice().sort((a, b) => {\n      return -(a.value - b.value);\n    });\n\n    return words;\n  }\n\n  @action\n  private toggleInBlackList = (word: string) => {\n    if (this.bannedList.includes(word)) {\n      pull(this.bannedList, word);\n    } else {\n      this.bannedList.push(word);\n    }\n  };\n\n  @action.bound\n  private setFilterAmount({target : {value}}) {\n    this.filterAmount = value;\n  }\n\n  public render(): React.ReactNode {\n    const {logEntryStore} = this.props;\n    const data = this.props.logEntryStore?.keywords || [];\n\n    if (logEntryStore.fetchingKeywords?.state === PENDING) {\n      return <Spin/>;\n    }\n\n    return (\n      <div className=\"keyword\">\n        {logEntryStore.fetchingKeywords?.case({\n          fulfilled: () => (\n            <Row>\n              <Col className=\"treemap\">\n                <KeywordTreemap data={this.activeWords} minCount={this.filterAmount} />\n              </Col>\n              <Col className=\"filters\">\n                <div className=\"mb-2\">Number of days recorded: {data?.length}\n                </div>\n                <div className=\"mb-4\">\n                  <span>Filter by min occurrence</span>\n                  <Input\n                    type=\"number\"\n                    value={this.filterAmount}\n                    onChange={this.setFilterAmount}\n                  />\n                </div>\n                <KeywordList\n                  list={this.allWords}\n                  updateList={this.toggleInBlackList}\n                  minCount={this.filterAmount}\n                />\n              </Col>\n            </Row>\n          ),\n          rejected: () => <Rejected message={'Error fetching Keywords'}/>,\n        })}\n      </div>\n    );\n  }\n}\n","/Users/terence/code/log-front/src/data-vis/keywords/keywordTag.tsx",[],"/Users/terence/code/log-front/src/data-vis/keywords/keywordList.tsx",[],"/Users/terence/code/log-front/src/data-vis/calendar/calendar-keyword.tsx",[],"/Users/terence/code/log-front/src/data-vis/keywords/keywordTreeMap.tsx",[],"/Users/terence/code/log-front/src/entry-modal/calorie-entry/calorie.interfaces.ts",[],"/Users/terence/code/log-front/src/entry-modal/log-entry/log-entry.interfaces.ts",[],"/Users/terence/code/log-front/src/entry-modal/log-entry/log-entry.helper.ts",[],"/Users/terence/code/log-front/src/entry-modal/event-entry/life-event.interfaces.ts",[],"/Users/terence/code/log-front/src/entry-modal/log-entry/log-entry.component.tsx",[],"/Users/terence/code/log-front/src/entry-modal/calorie-entry/calorie.component.tsx",[],"/Users/terence/code/log-front/src/entry-modal/event-entry/life-event.component.tsx",[],"/Users/terence/code/log-front/src/custom-components/index.ts",[],"/Users/terence/code/log-front/src/entry-modal/calorie-entry/csv-upload/index.ts",[],"/Users/terence/code/log-front/src/custom-components/rejected.tsx",[],"/Users/terence/code/log-front/src/custom-components/numbers-only-select.tsx",[],"/Users/terence/code/log-front/src/custom-components/warning-result.tsx",[],"/Users/terence/code/log-front/src/entry-modal/calorie-entry/csv-upload/csv-upload.component.tsx",[],"/Users/terence/code/log-front/src/custom-components/ReactEcharts.tsx",[],{"ruleId":"286","severity":1,"message":"287","line":3,"column":10,"nodeType":"288","messageId":"289","endLine":3,"endColumn":24},{"ruleId":"286","severity":1,"message":"290","line":13,"column":10,"nodeType":"288","messageId":"289","endLine":13,"endColumn":27},{"ruleId":"286","severity":1,"message":"291","line":14,"column":10,"nodeType":"288","messageId":"289","endLine":14,"endColumn":22},{"ruleId":"286","severity":1,"message":"292","line":21,"column":8,"nodeType":"288","messageId":"289","endLine":21,"endColumn":23},{"ruleId":"293","severity":1,"message":"294","line":17,"column":66,"nodeType":"295","messageId":"296","endLine":17,"endColumn":69,"suggestions":"297"},{"ruleId":"293","severity":1,"message":"294","line":64,"column":49,"nodeType":"295","messageId":"296","endLine":64,"endColumn":52,"suggestions":"298"},{"ruleId":"293","severity":1,"message":"294","line":17,"column":68,"nodeType":"295","messageId":"296","endLine":17,"endColumn":71,"suggestions":"299"},{"ruleId":"293","severity":1,"message":"294","line":35,"column":64,"nodeType":"295","messageId":"296","endLine":35,"endColumn":67,"suggestions":"300"},{"ruleId":"293","severity":1,"message":"294","line":38,"column":64,"nodeType":"295","messageId":"296","endLine":38,"endColumn":67,"suggestions":"301"},{"ruleId":"293","severity":1,"message":"294","line":41,"column":66,"nodeType":"295","messageId":"296","endLine":41,"endColumn":69,"suggestions":"302"},{"ruleId":"293","severity":1,"message":"294","line":65,"column":68,"nodeType":"295","messageId":"296","endLine":65,"endColumn":71,"suggestions":"303"},{"ruleId":"293","severity":1,"message":"294","line":79,"column":66,"nodeType":"295","messageId":"296","endLine":79,"endColumn":69,"suggestions":"304"},{"ruleId":"293","severity":1,"message":"294","line":93,"column":66,"nodeType":"295","messageId":"296","endLine":93,"endColumn":69,"suggestions":"305"},{"ruleId":"293","severity":1,"message":"294","line":104,"column":33,"nodeType":"295","messageId":"296","endLine":104,"endColumn":36,"suggestions":"306"},{"ruleId":"293","severity":1,"message":"294","line":109,"column":33,"nodeType":"295","messageId":"296","endLine":109,"endColumn":36,"suggestions":"307"},{"ruleId":"293","severity":1,"message":"294","line":114,"column":30,"nodeType":"295","messageId":"296","endLine":114,"endColumn":33,"suggestions":"308"},{"ruleId":"309","severity":1,"message":"310","line":152,"column":18,"nodeType":"311","messageId":"312","endLine":152,"endColumn":29},{"ruleId":"286","severity":1,"message":"313","line":14,"column":85,"nodeType":"288","messageId":"289","endLine":14,"endColumn":86},{"ruleId":"286","severity":1,"message":"313","line":25,"column":78,"nodeType":"288","messageId":"289","endLine":25,"endColumn":79},{"ruleId":"286","severity":1,"message":"313","line":33,"column":82,"nodeType":"288","messageId":"289","endLine":33,"endColumn":83},{"ruleId":"293","severity":1,"message":"294","line":27,"column":29,"nodeType":"295","messageId":"296","endLine":27,"endColumn":32,"suggestions":"314"},{"ruleId":"286","severity":1,"message":"313","line":58,"column":22,"nodeType":"288","messageId":"289","endLine":58,"endColumn":23},{"ruleId":"286","severity":1,"message":"313","line":59,"column":17,"nodeType":"288","messageId":"289","endLine":59,"endColumn":18},"@typescript-eslint/no-unused-vars","'EntryFormModal' is defined but never used.","Identifier","unusedVar","'EntryFormSelector' is defined but never used.","'EntryOptions' is defined but never used.","'CalendarKeyword' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["315","316"],["317","318"],["319","320"],["321","322"],["323","324"],["325","326"],["327","328"],["329","330"],["331","332"],["333","334"],["335","336"],["337","338"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","'_' is defined but never used.",["339","340"],{"messageId":"341","fix":"342","desc":"343"},{"messageId":"344","fix":"345","desc":"346"},{"messageId":"341","fix":"347","desc":"343"},{"messageId":"344","fix":"348","desc":"346"},{"messageId":"341","fix":"349","desc":"343"},{"messageId":"344","fix":"350","desc":"346"},{"messageId":"341","fix":"351","desc":"343"},{"messageId":"344","fix":"352","desc":"346"},{"messageId":"341","fix":"353","desc":"343"},{"messageId":"344","fix":"354","desc":"346"},{"messageId":"341","fix":"355","desc":"343"},{"messageId":"344","fix":"356","desc":"346"},{"messageId":"341","fix":"357","desc":"343"},{"messageId":"344","fix":"358","desc":"346"},{"messageId":"341","fix":"359","desc":"343"},{"messageId":"344","fix":"360","desc":"346"},{"messageId":"341","fix":"361","desc":"343"},{"messageId":"344","fix":"362","desc":"346"},{"messageId":"341","fix":"363","desc":"343"},{"messageId":"344","fix":"364","desc":"346"},{"messageId":"341","fix":"365","desc":"343"},{"messageId":"344","fix":"366","desc":"346"},{"messageId":"341","fix":"367","desc":"343"},{"messageId":"344","fix":"368","desc":"346"},{"messageId":"341","fix":"369","desc":"343"},{"messageId":"344","fix":"370","desc":"346"},"suggestUnknown",{"range":"371","text":"372"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"371","text":"373"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"374","text":"372"},{"range":"374","text":"373"},{"range":"375","text":"372"},{"range":"375","text":"373"},{"range":"376","text":"372"},{"range":"376","text":"373"},{"range":"377","text":"372"},{"range":"377","text":"373"},{"range":"378","text":"372"},{"range":"378","text":"373"},{"range":"379","text":"372"},{"range":"379","text":"373"},{"range":"380","text":"372"},{"range":"380","text":"373"},{"range":"381","text":"372"},{"range":"381","text":"373"},{"range":"382","text":"372"},{"range":"382","text":"373"},{"range":"383","text":"372"},{"range":"383","text":"373"},{"range":"384","text":"372"},{"range":"384","text":"373"},{"range":"385","text":"372"},{"range":"385","text":"373"},[663,666],"unknown","never",[1849,1852],[614,617],[1069,1072],[1154,1157],[1241,1244],[1773,1776],[2159,2162],[2540,2543],[2773,2776],[2869,2872],[2962,2965],[747,750]]